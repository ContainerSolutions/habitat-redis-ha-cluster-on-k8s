set -x
echo 1

env

add_label_to_self_pod() {
  echo "ADDING LABEL $1"
  return 0
}

remove_label_from_self_pod() {
  echo "REMOVING LABEL $1"
  return 0
}

#    ADD_FOLLOWER='{ "op": "add", "path": "/metadata/labels/follower", "value": "true" }'
#    curl -v \
#      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
#      -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" 
#      --request PATCH \
#      --data "$ADD_FOLLOWER" \
#      -H "Content-Type:application/json-patch+json" \
#      https://kubernetes/api/v1/namespaces/$POD_NAMESPACE/pods/$POD_NAME
#
##https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$POD_NAMESPACE/pods/$POD_NAME


# Initially, we have no clue wether or not we are a follower or a leader.
state="undecided"

# Wait until a member ID has been assigned.
hostname=$(hostname)

while true; do
  member_id=$(curl -s localhost:9631/census | jq -r ".censuses.\"redis.redis-cluster-test\".population | to_entries | map(select(.value.sys.hostname == \"$hostname\"))[0].value.member_id")
  am_i_a_leader=$(curl -s localhost:9631/census | jq -r ".censuses.\"redis.redis-cluster-test\".population.\"$member_id\".leader")
  echo "[$(date)] state: $state, member_id: $member_id,  leader_state: '$am_i_a_leader'"

  case "$am_i_a_leader" in
    true)
      if [[ "$state"  != "leader" ]]; then
        echo "I have become a leader"
        remove_label_from_self_pod "follower"
        add_label_to_self_pod "leader"
        state="leader"
      fi
    ;;
    false)
      if [[ "$state" != "follower" ]]; then
        echo "I have become a follower"
        remove_label_from_self_pod "leader"
        add_label_to_self_pod "follower"
        state="follower"
      fi
    ;;
    *)
      echo "Hmm. I'm not a leader, but a '$am_i_a_leader'"
    ;;
  esac
done

#  vim: set filetype=sh :
